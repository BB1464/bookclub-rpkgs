[["index.html", "R Packages Book Club Welcome", " R Packages Book Club The R4DS Online Learning Community 2022-04-28 Welcome Welcome to the bookclub! This is a companion for the book R Packages by Hadley Wickham and Jenny Bryan (work-in-progress 2nd edition, copyright 2022). This companion is available at r4ds.io/rpkgs. This website is being developed by the R4DS Online Learning Community. Follow along, and join the community to participate. This companion follows the R4DS Online Learning Community Code of Conduct. "],["book-club-meetings.html", "Book club meetings", " Book club meetings Each week, a volunteer will present a chapter from the book (or part of a chapter). This is the best way to learn the material. Presentations will usually consist of a review of the material, a discussion, and/or a demonstration of the principles presented in that chapter. More information about how to present is available in the github repo. Presentations will be recorded, and will be available on the R4DS Online Learning Community YouTube Channel. Camera is optional, but encouraged. If we need to slow down and discuss, let me know Most likely someone has the same question We are all here to learn "],["pace.html", "Pace", " Pace We’ll try to cover 1 chapter/week, but… …It’s ok to split chapters when they feel like too much. We will try to meet every week, but will likely take some breaks for holidays, etc. The sessions will be exactly one hour. I encourage the group to adopt a ‘go no matter what’ mentality. "],["introductions.html", "Introductions", " Introductions If you feel comfortable sharing: Who are you? Where are you calling in from? How long have you been using R? What are you most looking forward to during the group? "],["git-and-github.html", "git and GitHub", " git and GitHub It’s worth taking the time to learn git and version control. It’s a topic discussed more in-depth later in the book. If you lead the discussion, it’s best to integrate your materials into this bookdown version of the materials. You’ll need a GitHub account to submit any modifications. If you’re comfortable with git and GitHub Fork the repo to your account. Create a branch to make your changes. Submit a pull request via the R4DS repo for the book PR’s will are reviewed before being pushed and knitted "],["questions-for-the-group.html", "Questions for the group", " Questions for the group Question 1 Question 1 for the group (submit answers to the chat) On a scale from 1 - 5, how familiar are you with using git for version control? 1 = Not at all familiar (a true beginner) to 5 = Very familiar (use git everyday/can handle a merge conflict like a pro) Question 2 for the group On a scale from 1 - 5, how familiar are you with using GitHub? 1 = Not at all familiar (a true beginner) to 5 = Very familiar (I have GitHub account with repositories) Optional Question 3 (depending on feedback) On a scale from 1 - 5, how valuable would it be to devote a week to introducing git and GitHub? 1 = Not at all valuable to 5 = Very valuable "],["resources-to-learn-more-about-git-and-github.html", "Resources to learn more about git and GitHub", " Resources to learn more about git and GitHub Happy Git and GitHub for the useR usethis’s pull request helpers git’s documentation MShiny Cohort 2 Introduction Git for Book Clubs YouTube playlist "],["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction Learning objectives: Explain the book club format. Explain what an R package is. Describe why we should develop packages. Discuss the philosophy behind the use of the devtools and usethis packages in package development. "],["what-is-an-r-package.html", "1.1 What is an R package?", " 1.1 What is an R package? R packages can be defined based on their utility: A means to bundle code, data, documentation, and tests that can easily be shared with others. A package opens up the use of several workflow packages/tools. R packages can be defined by their structure: Discussed throughout the book club At its core, packages are defined by the conventions of how files and directories are organized: \\R; DESCRIPTION file; \\tests; \\data; etc. Packaging Data Analytical Work Reproducibly Using R (and Friends) "],["installing-and-using-packages.html", "1.2 Installing and using packages", " 1.2 Installing and using packages Packages are available via Comprehensive R Archive Network (CRAN) Packages are also available via different public repos GitHub is the most popular. 1.2.1 Installing packages install.packages(&quot;x&quot;) library(&quot;x&quot;) # Getting help package?x help(package = &quot;x&quot;) "],["why-develop-packages.html", "1.3 Why develop packages?", " 1.3 Why develop packages? Allows us to more easily share and use code amongst the team and other collaborators. Saves yourself and your team’s time. Opens up the use of several tools to more efficiently write code. Defines a formal organizational structure of where to put things. Allows us to develop more robust, rigorous, reproducible analyses. Helps us write better code. "],["philosophy-behind-the-tools-of-r-package-development.html", "1.4 Philosophy behind the tools of R Package development", " 1.4 Philosophy behind the tools of R Package development Anything that can be automated, should be automated. Use functions for package development, avoid doing it by hand. To do this, we need to learn the functions/workflow. Our thinking should be on what we want the package to do, not on how to organize a package. This is where the devtools and usethis package come into play. Tools to insulate us from the low-level details of how packages are built. devtools works nicely with RStudio, so that’s the development environment we will use. install.packages(c(&quot;devtools&quot;, &quot;usethis&quot;)) "],["what-if-we-need-more-detail.html", "1.5 What if we need more detail?", " 1.5 What if we need more detail? The official manual is Writing R Extensions. This document is exhaustive. "],["a-note.html", "1.6 A note", " 1.6 A note Don’t get overwhelmed Some stuff you may never use. Remember, an R package at it’s core is just an R/ directory. You are not expected to know everything. We are all learning. None of us is as smart as all of us. It’s okay to say “I don’t know.” We can stop at anytime to discuss. "],["meeting-videos.html", "1.7 Meeting Videos", " 1.7 Meeting Videos 1.7.1 Cohort 1 Meeting chat log LOG "],["the-whole-game.html", "Chapter 2 The whole game", " Chapter 2 The whole game Learning objectives: Become acquainted with the entire workflow for developing a package. Observe the use of some common functions used in the package development workflow. Understand the process to develop, document, and test a function. Describe the process to install and experiment with a package’s functions. Discuss the roles git and GitHub play in the development of a package. "],["warmupice-breaker.html", "2.1 Warmup/Ice breaker", " 2.1 Warmup/Ice breaker Do you say data (“day - ta”), data (“dah - ta”), or something else? "],["a-few-reminders.html", "2.2 A few reminders", " 2.2 A few reminders If we need to slow down and discuss, let me know. If you have a question, most likely someone else will have the same question. We are all here to learn. Camera is optional, but encouraged. Sessions are recorded and uploaded YouTube. See the pins in the Slack channel for the schedule and sign-ups. "],["load-devtools-and-friends.html", "2.3 Load devtools and friends", " 2.3 Load devtools and friends library(devtools) ## Loading required package: usethis # Check package version packageVersion(&quot;devtools&quot;) ## [1] &#39;2.4.3&#39; Latest version as of the writing of these notes is 2.4.3. "],["what-types-of-functionstools-are-used-during-package-development.html", "2.4 What types of functions/tools are used during package development?", " 2.4 What types of functions/tools are used during package development? Functions fulfilling a specific need. Functions used to facilitate the use of version control (i.e., git and GitHub). Functions to assist in the package development workflow. Setting up the function file Developing documentation (e.g. roxygen2) Testing our code (e.g. testthat) Using a README.Rmd file for documentation. "],["create-the-package.html", "2.5 Create the package", " 2.5 Create the package Use usethis::create_package(\"~path/to/package) Before you run: Consider where these files will be placed Files created (options to view ‘dotfiles’) .Rbuildignore: Files ignored when the package is built from source. .Rproj.user: A directory used by RStudio .gitignore: A file to ignore files for version control. DESCRIPTION: Provides metadata about your package. NAMESPACE: Declares functions to export and external functions to import from other packages. R: The business end of your package. Will hold all of the .R files. projectName.Rproj: File that makes this directory a project. "],["example-package.html", "2.6 Example package", " 2.6 Example package The example package being discussed can be found here. The development can be viewed via the commit history. "],["git-github-a-brief-brief-intro.html", "2.7 git &amp; GitHub, a brief, brief intro", " 2.7 git &amp; GitHub, a brief, brief intro Moving (mirroring) and tracking changes to files (track changes) Topic is certainly more complex Difference between git and GitHub/Bitbucket/GitLab Set up authentication Managing Git(Hub) credentials vignette Happy Git and GitHub for the useR Once you’re set up, you’re good to go. Choose a git client Many, many options (just choose one) Built in Git tab in R Studio GitHub Desktop app usethis helper functions gert package 2.7.1 Fork triangle Diagram taken from Happy Git and GitHub for the useR 2.7.2 Basic workflow 2.7.3 Simplify this workflow Use usethis::create_from_github(\"https://github.com/jennybc/regexcite.git\", fork = TRUE, open = TRUE) Explore the use of the gert package. A simple git client Uses simple R data types (e.g., tibbles) usethis pull request helpers. I ran out of time to review and get comfortable using these functions. Read this vignette here. "],["creating-a-function.html", "2.8 Creating a function", " 2.8 Creating a function use_r() creates a file below the R/ subdirectory. Each new function–when starting out–should get its own file. More complex packages = more functions per file. No other top level code should be in the file. No library() in the function files. Different mechanisms are used to declare dependencies. Scripts &gt;&gt;&gt; packages The book doesn’t cover how to write functions: Functions chapter R4DS Functions chapter in Advanced R Any other resources? Not a novel function. Used for demonstration purposes. #&#39; Create a file name with a date time prefix #&#39; #&#39; @param file_name string A string element representing a file name #&#39; #&#39; @return string value #&#39; #&#39; @export #&#39; #&#39; @examples #&#39; #&#39; create_date_file_name(&quot;data_file.csv&quot;) #&#39; create_date_file_name &lt;- function(file_name){ paste0(gsub(&quot;[-: ]&quot;, &quot;_&quot;, Sys.time()), &quot;_&quot;, file_name) } "],["taking-functions-for-a-test-drive.html", "2.9 Taking functions for a test drive", " 2.9 Taking functions for a test drive load_all() - quickly makes functions available for experimentation. Simulates the process of building, installing, and attaching the package. Technically, function is not in the global environment. Test using exists(\"function-name\", where = globalenv(), inherits = FALSE) This is a much, much faster workflow. It’s good practice to commit once you finish a function. Commits are cheap. "],["checking-package-with-check.html", "2.10 Checking package with check()", " 2.10 Checking package with check() Runs the R CMD check This is the gold standard to get feedback regarding your code. To run this, we use the check() function. Read the output, it tells you what needs to be fixed. Deal with problems early and often. Fix it now, not later. Don’t let work pile up. Harder to fix when problems accumulate. "],["store-package-metadata-in-the-description-file.html", "2.11 Store package metadata in the DESCRIPTION file", " 2.11 Store package metadata in the DESCRIPTION file Package: regexcite Title: Make Regular Expressions More Exciting Version: 0.0.0.9000 Authors@R: person(&quot;Jane&quot;, &quot;Doe&quot;, , &quot;jane@example.com&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;)) Description: Convenience functions to make some common tasks with string manipulation and regular expressions a bit easier. License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a license Encoding: UTF-8 Roxygen: list(markdown = TRUE) RoxygenNote: 7.1.2 "],["pick-a-license-any-license.html", "2.12 Pick a license, any license", " 2.12 Pick a license, any license For personal packages, licensing is not too much of a concern (not a lawyer, though). If you develop a public facing package, then licensing becomes more important. Use a usethis::use_*_license to get up and running quickly with a license. This configures the LISCENSE field in DESCRIPTION "],["documenting-functions.html", "2.13 Documenting functions", " 2.13 Documenting functions Functions are documented using LaTeX. All documentation gets stored in the man/ directory. We don’t have to manually set up documentation. A package called roxygen2 which manages the man/ directory. A roxygen2 skeleton always has #' at the start of each line. When done documenting, run document() to build the man/ files. This is draft documentation. Links will not work. #&#39; Split a string #&#39; #&#39; @param x A character vector with one element. #&#39; @param split What to split on. #&#39; #&#39; @return A character vector. #&#39; @export #&#39; #&#39; @examples #&#39; x &lt;- &quot;alfa,bravo,charlie,delta&quot; #&#39; strsplit(x, split = &quot;,&quot;) "],["the-namespace-file.html", "2.14 The NAMESPACE file", " 2.14 The NAMESPACE file document(): Converts roxygen2 comments into proper R documentation. Updates the NAMESPACE file. Contains all the functions that will be made available to the users of our package. This is based on the @export directive in the roxygen2 skeleton. Don’t edit this by hand. "],["installing-the-package-for-the-first-time.html", "2.15 Installing the package for the first time", " 2.15 Installing the package for the first time Once we have a minimum viable product, install() can be run. Then attach it using library(). At this state, we can test our package as if it was installed. "],["testing-our-package-functions.html", "2.16 Testing our package functions", " 2.16 Testing our package functions We can set up expectations for how our functions work using formalized tests. We’ll discuss this more when we get to the testing chapter. use_testthat() sets up the testing framework. use_test() creates a file for your tests. test() runs all your tests. check() runs R CMD check and your tests "],["using-functions-from-other-packages.html", "2.17 Using functions from other packages", " 2.17 Using functions from other packages We need to import these functions. Use use_package() to show your intent for wanting to use a set of functions within your package. This adds the package to the Imports section of DESCRIPTION. Many options on how to use the functions from imported packages. We will get to this discussion. One way is to be explicit stringr::str_split(). Other options via the use of roxygen2 @import directives Review this example Introduces the rename_files() function Modifying tests Reviews the use of document() and load_all() "],["the-readme-file.html", "2.18 The README file", " 2.18 The README file This is the homepage for the package. The welcome mat. Run use_readme_rmd() to set this up. The purpose of the README.Rmd file is to: Describe the purpose of the package. Provides installation instructions. Highlights a bit of usage. Don’t forget to build the README, build_readme() "],["run-check-and-install-commit-and-push.html", "2.19 Run check() and install(), commit and push", " 2.19 Run check() and install(), commit and push For good measure, run check() and install() Fix any issues. Commit and push "],["meeting-videos-1.html", "2.20 Meeting Videos", " 2.20 Meeting Videos 2.20.1 Cohort 1 Meeting chat log LOG "],["system-setup.html", "Chapter 3 System setup", " Chapter 3 System setup Learning objectives: How to check which version of R and RStudio you are using Discover devtools Learn about the {usethis} package Understand the distict difference between useRs and developeRs "],["prepare-your-system.html", "3.1 Prepare your system", " 3.1 Prepare your system To start the preparation of development environment, lets get our bearings. R.Version() ## $platform ## [1] &quot;x86_64-pc-linux-gnu&quot; ## ## $arch ## [1] &quot;x86_64&quot; ## ## $os ## [1] &quot;linux-gnu&quot; ## ## $system ## [1] &quot;x86_64, linux-gnu&quot; ## ## $status ## [1] &quot;&quot; ## ## $major ## [1] &quot;4&quot; ## ## $minor ## [1] &quot;1.2&quot; ## ## $year ## [1] &quot;2021&quot; ## ## $month ## [1] &quot;11&quot; ## ## $day ## [1] &quot;01&quot; ## ## $`svn rev` ## [1] &quot;81115&quot; ## ## $language ## [1] &quot;R&quot; ## ## $version.string ## [1] &quot;R version 4.1.2 (2021-11-01)&quot; ## ## $nickname ## [1] &quot;Bird Hippie&quot; sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ## ## locale: ## [1] LC_CTYPE=C.UTF-8 LC_NUMERIC=C LC_TIME=C.UTF-8 ## [4] LC_COLLATE=C.UTF-8 LC_MONETARY=C.UTF-8 LC_MESSAGES=C.UTF-8 ## [7] LC_PAPER=C.UTF-8 LC_NAME=C LC_ADDRESS=C ## [10] LC_TELEPHONE=C LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] devtools_2.4.3 usethis_2.1.5 ## ## loaded via a namespace (and not attached): ## [1] bslib_0.3.1 compiler_4.1.2 jquerylib_0.1.4 highr_0.9 ## [5] remotes_2.4.2 prettyunits_1.1.1 tools_4.1.2 testthat_3.1.4 ## [9] digest_0.6.29 pkgbuild_1.3.1 pkgload_1.2.4 jsonlite_1.8.0 ## [13] evaluate_0.15 memoise_2.0.1 lifecycle_1.0.1 rlang_1.0.2 ## [17] cli_3.3.0 rstudioapi_0.13 yaml_2.3.5 xfun_0.30 ## [21] fastmap_1.1.0 withr_2.5.0 stringr_1.4.0 knitr_1.39 ## [25] desc_1.4.1 fs_1.5.2 sass_0.4.1 rprojroot_2.0.3 ## [29] glue_1.6.2 R6_2.5.1 processx_3.5.3 rmarkdown_2.14 ## [33] bookdown_0.26 sessioninfo_1.2.2 purrr_0.3.4 callr_3.7.0 ## [37] magrittr_2.0.3 ps_1.7.0 htmltools_0.5.2 ellipsis_0.3.2 ## [41] stringi_1.7.6 cachem_1.0.6 crayon_1.5.1 brio_1.1.3 Ok, that was fun, but the version check isn’t in the book! We need to follow the author, right? Let’s load some packages to prepare authoring some packages! install.packages(c(&quot;devtools&quot;, &quot;roxygen2&quot;, &quot;testthat&quot;, &quot;knitr&quot;)) NOTE: For some reason, this script caused an infinite loop of restart R, attempt to install, request to restart R, attempt to install…infinity. If this should happen, select No. The author recommends increasing to the Preview version of RStudio Integrated Development Environment (IDE). We are considering outselves developers, right? Usually this isn’t needed or required for common users (we’re not common) It puts you in a position to be subject to bugs (not as many as the daily builds though) Preview version Released version "],["devtools-usethis-and-you.html", "3.2 devtools, usethis, and you", " 3.2 devtools, usethis, and you At some point in your development career…you will find you need to reorder to progress further. This is exactly what happened to the {devtools} package. In 2018, it was reordered and split into seven sub-packages: {remotes} {pkgbuild} {pkgload} {rcmdcheck} {revdepcheck} {sessioninfo} {usethis} What is cool here, we already used one of these packages!!! You can think of devtools as a wrapper providing the ability to: set user-friendly defaults introduce helpful interactive behaviour combine functionality from multiple sub-packages There is a difference in useRs and developeRs. They are: useRs should attach devtools and think of it as the provider of your favorite functions for package development developeRs should NOT depend on devtools, but should instead access functions via the package that is their primary home devtools should rarely appear in the role of foo in a qualified call of the form foo::fcn(). Instead, foo should be the package where fcn() is defined. An exception to this is that we continue to feature devtools::install_github() as the way to install the development version of a package in its README If required, ensure you report bugs to each sub-package Example of how to simulate installing and loading a package (interactive development) library(devtools) load_all() ## ℹ Loading bookclub-rpkgs If used inside an R package, this is the preferred call: pkgload::load_all() ## ℹ Loading bookclub-rpkgs 3.2.1 Personal startup configuration Attach devtools with the following script: library(devtools) Doing this everytime you restart your session gets old…quick! Lets be more efficient with our keystrokes. Let’s edit our .Rprofile file. If it does not exist on your computer, you can run use_devtools() to create it. The output of my command looks like this: use_devtools() • Include this code in &#39;.Rprofile&#39; to make devtools available in all interactive sessions. if (interactive()) { suppressMessages(require(devtools)) } [Copied to clipboard] • Modify &#39;/Users/rmetcalf/.Rprofile&#39; • Restart R for changes to take effect Caution, Warning, HUGE RED FLAG!!!! You are not a Super-person yet! In general, it’s a bad idea to attach packages in .Rprofile, as it invites you to create R scripts that don’t reflect all of their dependencies via explicit calls to library(foo). But devtools is a workflow package that smooths the process of package development and is, therefore, unlikely to get baked into any analysis scripts. Note how we still take care to only attach in interactive sessions. I may be too harsh. The following is a good example when usethis helps and can be added to your .Rprofile. options( usethis.full_name = &quot;Jane Doe&quot;, usethis.description = list( `Authors@R` = &#39;person(&quot;Jane&quot;, &quot;Doe&quot;, email = &quot;jane@example.com&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;)), comment = c(ORCID = &quot;YOUR-ORCID-ID&quot;))&#39;, License = &quot;MIT + file LICENSE&quot;, Version = &quot;0.0.0.9000&quot; ), usethis.protocol = &quot;ssh&quot; ) For history purposes (or at some point it may change….) devtools::install_github(&quot;r-lib/devtools&quot;) devtools::install_github(&quot;r-lib/usethis&quot;) "],["r-build-toolchain.html", "3.3 R build toolchain", " 3.3 R build toolchain Any good developer must have a good compiler. The following three sections will expand on how this may be accomplished via the three main operating systems. NOTE: At this point, these may not be required. The compiler options will becomre important when a source code contains C or C++ code. 3.3.1 Windows On Windows the collection of tools needed for building packages from source is called Rtools. Rtools is NOT an R package and therefore cannot be installed using install.packages('Rtools') During the Rtools installation you may see a window asking you to Select Additional Tasks. DO NOT select the box for Edit the system PATH. DO select the box for Save version information to registry. 3.3.2 macOS If development is on a Mac, you will require Xcode. In shell/terminal run the following code: xcode-select --install NOTE: Xcode is large….like, ~90GBs large (an estimate with all simulators)! There are options to reduce the size and can be found here. Alternatively, you can also download Xcode from the Mac App Store. 3.3.3 Linux Linux install is the simplest (dependent on your distro of choice and package manager). Ensure you include the following: R R development tools For example, on Ubuntu (and Debian): sudo apt-get update &amp; upgrade sudo apt-get install r-base-dev package Other Linux distributions may have alternative commands. 3.3.4 Verify system prep To validate everything is installed or up to date, run the following: devtools::dev_sitrep() Update any packages based on recommendations. "],["package-structure-and-state.html", "Chapter 4 Package structure and state", " Chapter 4 Package structure and state Learning objectives: Convert implicit knowledge into the explicit knowledge to create and modify R packages Learn about the various states a package Identify the difference between a package and library Understand the use of .Rbuildignore "],["package-states.html", "4.1 Package states", " 4.1 Package states When you create or modify a package, you work on its source code or source files You interact with the in-development package in its source form R Packages can be in five different states: source: Raw form, editable bundled: Compressed to a single archive file (.tar) binary: Compiled, OS Specific (Windows or Mac). It is implied Linux already has the ability to compile if required. installed: Decompressed into a package library in-memory: Explicitly referenced for use Function calls like install.packages() and devtools::install_github() move a package from source, bundled, or binary states into the installed state. Functions like library() bring your package into memory for immediate use. "],["source-package.html", "4.2 Source package", " 4.2 Source package A source package is just a directory of files with a specific structure Source package contains a DESCRIPTION file, and R directory containing .R files, etc… Some of our group have mentioned authoring or writing packages. Many, this is a new subject. Therefore you can view source files by first navigating to CRAN and by extension to its source repository. (Please correct me if my terminology is incorrect). Examples of CRAN landing page: forcats readxl Examples of GitHub/GitLab (or equivelent) version storage: forcats readxl Note: Some maintainers fail to link their source repos. In this case, google is your friend! Even if a package is not developed on a public platform, you can visit its source in the unofficial, read-only mirror maintained by R-hub. Examples: MASS car Note: This mirror is not the same as exploring the package’s true development venue, because this source and its evolution is just reverse-engineered from the package’s CRAN releases. "],["bundled-package.html", "4.3 Bundled package", " 4.3 Bundled package A bundled package is a package that’s been compressed into a single file By extension of Linux, source tarballs or tar.gz files Implying, source files and directories have been archived using the tar utility .tar stands for Tape Archive creates one file out of many files (with some compression) The files are fully compressed using gzip or GNU Zip gzip creates the .gz extension a bundled package is not source nor installed, but rather, an OS-agnostic storage medium If you need to bundle a package your developing, use devtools::build(). TLDR: The devtools::build() calls pkgbuild::build() under the hood and ultimately R CMD build. For more information see Building package tarballs. All CRAN packages are available in bundled form and can be downloaded from their CRAN landing page. On Mac or Linux, run the following, from shell/terminal, to decompress and un-archive: tar xvf forcats_0.4.0.tar.gz Quick explanation, you are calling on the tar utility. -x is extract, -v is verbose (show the output…makes you feel good to know something is happening), and -f is filename, uses the same filename as the archive. Windows users, I’m sorry, you’re going to have to use some type of utility like 7-Zip, WinZip, or WinRAR to decompress and un-archive. Windows does not have a native utility to accomplish this action. (Feel welcome to share your PowerShell examples if I’m incorrect). Note: A bit of research turns up, the tar utility was added to Windows 10, circa 2018. Earlier versions of Windows would require a third-party application. Figure 4.1: Side-by-side comparison of source, bundled, and binary package. The main differences between a source package and an uncompressed bundle are: Vignettes have been built, so rendered outputs, such as HTML, appear below inst/doc/ and a vignette index appears in the build/ directory, usually alongside a PDF package manual. A local source package might contain temporary files used to save time during development, like compilation artifacts in src/. These are never found in a bundle. Any files listed in .Rbuildignore are not included in the bundle. These are typically files that facilitate your development process, but that should be excluded from the distributed product. 4.3.1 .Rbuildignore It is rare to contemplate the .tar.gz structure. However, it IS important to understand the .Rbuildignore file. Rbuildignore controls which files from the source package make it into the downstream forms The concept is similar to other .*ignore files. Exclude versus Include Each line of .Rbuildignore is a Perl-compatible regular expression case insensitive if the regex matches, the file is excluded You must anchor the regular expression for example ^notes$ will exclude any filename string containing notes. a less specific (or more automated method) is to use usethis::use_build_ignore(\"notes\") Rbuildignore is a means to compromise your development environment with CRAN’s requirements. The affected files fall into two broad, semi-overlapping classes: Files that help you generate package contents programmatically. Examples: Using README.Rmd to generate an informative and current README.md. Storing .R scripts to create and update internal or exported data. Files that drive package development, checking, and documentation, outside of CRAN’s purview. Examples: Files relating to the RStudio IDE. Using the pkgdown package to generate a website. Configuration files related to continuous integration/deployment and monitoring test coverage. A non-exhaustive list of typical entries in the .Rbuildignore file ^.*\\.Rproj$ # Designates the directory as an RStudio Project ^\\.Rproj\\.user$ # Used by RStudio for temporary files ^README\\.Rmd$ # An Rmd file used to generate README.md ^LICENSE\\.md$ # Full text of the license ^cran-comments\\.md$ # Comments for CRAN submission ^data-raw$ # Code used to create data included in the package ^pkgdown$ # Resources used for the package website ^_pkgdown\\.yml$ # Configuration info for the package website ^\\.github$ # Contributing guidelines, CoC, issue templates, etc. Note: The commmented text above should not be included in the Rbuildignore file and are only used for explination of each entry. Note: Remember that usethis::use_build_ignore() is an attractive way to manage this file. "],["binary-package.html", "4.4 Binary package", " 4.4 Binary package Binary packages are used when a colleague doesn’t have development tools installed Uses a single file Binary packages are OS-specific Mac: .tgz Windows: .zip Linux: generally already have libraries capable of working with binary packages To make a binary package use devtools::build(binary=TRUE) Under the hood, calls pkgbuild::build(binary=TRUE) and ultimately R CMD INSTALL --build For more information see Building binary packages section of Writing R Extensions The primary maker and distributor of binary is CRAN, not individual maintainers. Examples of downloading binary packages (image) Figure 4.2: Forcats CRAN Binary Download Options Ironically, this download process is exactly what is happening when you call install.packages() Decompressing a binary packages looks rather different from source or bundled package forms Notible Differences: There are no .R files in R/ directory. Instead a more efficient form is used Meta/ directory contains a number or .rds files Actual help/ and html/ are used instead of man/ If you had any code in src/ directory, it will not be in libs/ Windows binary also contains i386/ and x64/ for 32 or 64 bit environments Anything in data/ is converted to more efficient forms Contents of inst/ are moved to top-level (for example vignette files are not in doc/) Some files and folders have been dropped such as README, build/, test/, and vignettes/ . ├── DESCRIPTION ├── INDEX ├── LICENSE ├── Meta │ ├── Rd.rds │ ├── data.rds │ ├── features.rds │ ├── hsearch.rds │ ├── links.rds │ ├── nsInfo.rds │ ├── package.rds │ └── vignette.rds ├── NAMESPACE ├── NEWS.md ├── R │ ├── forcats │ ├── forcats.rdb │ └── forcats.rdx ├── data │ ├── Rdata.rdb │ ├── Rdata.rds │ └── Rdata.rdx ├── doc │ ├── forcats.R │ ├── forcats.Rmd │ ├── forcats.html │ └── index.html ├── help │ ├── AnIndex │ ├── aliases.rds │ ├── figures │ │ ├── README-ordered-plot-1.png │ │ ├── README-unordered-plot-1.png │ │ └── logo.png │ ├── forcats.rdb │ ├── forcats.rdx │ └── paths.rds └── html ├── 00Index.html └── R.css 7 directories, 33 files "],["installed-package.html", "4.5 Installed package", " 4.5 Installed package Installed package is a binary package that has been decompressed into a package library WARNING, COMPLICATED FIGURE AHEAD! LETS DISCUSS IT! In a perfect world, stringing together a set of simple steps: source -&gt; bundle, bundle -&gt; binary, binary -&gt; installed In the REAL world, it isn’t as simple Figure 4.3: Many methods for converting between package states. The cool part of this process, and why this figure is important is, the R CMD INSTALL is the primary service for all forms of packaging. For more information check out Installing packages section of Installing packages section. Devtools exposes a family of install_*() to address needs beyond only install.packages(). Again, more information can be found in remotes package. library(remotes) ## ## Attaching package: &#39;remotes&#39; ## The following objects are masked from &#39;package:devtools&#39;: ## ## dev_package_deps, install_bioc, install_bitbucket, install_cran, ## install_deps, install_dev, install_git, install_github, ## install_gitlab, install_local, install_svn, install_url, ## install_version, update_packages ## The following object is masked from &#39;package:usethis&#39;: ## ## git_credentials funs &lt;- as.character(lsf.str(&quot;package:remotes&quot;)) grep(&quot;^install_.+&quot;, funs, value = TRUE) ## [1] &quot;install_bioc&quot; &quot;install_bitbucket&quot; &quot;install_cran&quot; ## [4] &quot;install_deps&quot; &quot;install_dev&quot; &quot;install_git&quot; ## [7] &quot;install_github&quot; &quot;install_gitlab&quot; &quot;install_local&quot; ## [10] &quot;install_remote&quot; &quot;install_svn&quot; &quot;install_url&quot; ## [13] &quot;install_version&quot; install_github() is the flagship example of this remots library. using devtools/remotes install_*() functions aim at making things possible with base tooling a bit easier or more explicit Example is install_version() which installs a specific version of a CRAN package .Rinstignore lets you keep files present in a package bundle out of the installed package. The use of .Rinstignore is rather obscure or rarely needed TODO: Revisit this section later with respect to pak https://pak.r-lib.org. "],["in-memory-package.html", "4.6 In-memory package", " 4.6 In-memory package Let’s discuss library(usethis). library(usethis) create_package(&quot;~/newpackage&quot;) usethis package has been loaded into memory and attached to the search path Loading and Attaching packages is not important during writing scripts….IT IS EXTREMELY IMPORTANT WHEN WRITING PACKAGES See search path for more details We will learn in section 5.4 “Test drive with load_all()” how devtools::load_all() accelerates development, allowing you to load a source package directly to memory. "],["package-libraries.html", "4.7 Package libraries", " 4.7 Package libraries When calling library(foo), R looks through the current libraries for an installed package foo, and if successful, makes it available. Definition: Library: is a directory containing installed packages. Definition: Packages: are functional instructions to process information. These terms are often misused and reinforced within our vernacular (language dictionary). We use the library() function to load a package. As package prospect R Package Developers, it is a good idea to set the distinction between library and package early To see .libPaths() on Windows, use the following function call: .libPaths() lapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE) To see `.libPaths() on macOS, use the following function call: .libPaths() lapply(.libPaths(), list.dirs, recursive = FALSE, full.names = FALSE) NOTE TO SELF…THESE ARE THE SAME CALLS Considering the output, we view two things: A user library A system-level or global library A user library is typical for a Windows installation, but an opt-in for Mac Users. Depending on your development environment the idea would mean, I can delete my user packages but maintain my base R installation. (Lets discuss this for a moment). If you’re on macOS and only see one library, there is no urgent need to change anything. But next time you upgrade R, consider creating a user-level library. By default, R looks for a user library found at the path stored in the environment variable R_LIBS_USER, which itself defaults to ~/Library/R/x.y/library. When you install, R x.y.z and prior to installing any add-on packages, use dir.create(\"~/Library/R/x.y/library\") to set up a user library. Now you will have the library setup seen above. Alternatively, you could setup a user library elsewhere and tell R about that by setting the R_LIBS_USER environment variable in .Renviron. In is implied you need to re-install user packages for a minor version of R. (3.5.0 to 3.6.0). You generally do not require this for a patch release (3.6.0 to 3.6.1). NOTE: The x.y.z reference previously can also be read as major.minor.patch and is common within software engineering. As we grow and become more sophisticated, our management of packages will become more intricate. Examples like renv and its predecessor packrat() automate the process of managing project-specific libraries An example woudl be loading specific versions of an environment to test forward and backward compatibility Reverse dependency checks are another example of managing the library search path The main levers that control which libraries are active: Environment variables, like R_LIBS and R_LIBS_USER, which are consulted at startup Calling .libPaths() with one or more filepaths Executing small snippets of code with a temporarily altered library search path via withr::with_libpaths() Arguments to individual functions, like install.packages(lib =) and library(lib.loc =). NOTE: library() should NEVER be used inside a package. There are other mechinisims for declaring dependencies. We’ll discuss this more in chapter 13. "],["fundamental-development-workflows.html", "Chapter 5 Fundamental development workflows", " Chapter 5 Fundamental development workflows Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1.html", "5.1 SLIDE 1", " 5.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-2.html", "5.2 Meeting Videos", " 5.2 Meeting Videos 5.2.1 Cohort 1 Meeting chat log LOG "],["the-package-within.html", "Chapter 6 The package within", " Chapter 6 The package within Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-1.html", "6.1 SLIDE 1", " 6.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-3.html", "6.2 Meeting Videos", " 6.2 Meeting Videos 6.2.1 Cohort 1 Meeting chat log LOG "],["r-code.html", "Chapter 7 R code", " Chapter 7 R code Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-2.html", "7.1 SLIDE 1", " 7.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-4.html", "7.2 Meeting Videos", " 7.2 Meeting Videos 7.2.1 Cohort 1 Meeting chat log LOG "],["package-metadata.html", "Chapter 8 Package metadata", " Chapter 8 Package metadata Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-3.html", "8.1 SLIDE 1", " 8.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-5.html", "8.2 Meeting Videos", " 8.2 Meeting Videos 8.2.1 Cohort 1 Meeting chat log LOG "],["licensing.html", "Chapter 9 Licensing", " Chapter 9 Licensing Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-4.html", "9.1 SLIDE 1", " 9.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-6.html", "9.2 Meeting Videos", " 9.2 Meeting Videos 9.2.1 Cohort 1 Meeting chat log LOG "],["object-documentation.html", "Chapter 10 Object documentation", " Chapter 10 Object documentation Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-5.html", "10.1 SLIDE 1", " 10.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-7.html", "10.2 Meeting Videos", " 10.2 Meeting Videos 10.2.1 Cohort 1 Meeting chat log LOG "],["vignettes-long-form-documentation.html", "Chapter 11 Vignettes: long-form documentation", " Chapter 11 Vignettes: long-form documentation Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-6.html", "11.1 SLIDE 1", " 11.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-8.html", "11.2 Meeting Videos", " 11.2 Meeting Videos 11.2.1 Cohort 1 Meeting chat log LOG "],["testing.html", "Chapter 12 Testing", " Chapter 12 Testing Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-7.html", "12.1 SLIDE 1", " 12.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-9.html", "12.2 Meeting Videos", " 12.2 Meeting Videos 12.2.1 Cohort 1 Meeting chat log LOG "],["namespace.html", "Chapter 13 Namespace", " Chapter 13 Namespace Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-8.html", "13.1 SLIDE 1", " 13.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-10.html", "13.2 Meeting Videos", " 13.2 Meeting Videos 13.2.1 Cohort 1 Meeting chat log LOG "],["external-data.html", "Chapter 14 External data", " Chapter 14 External data Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-9.html", "14.1 SLIDE 1", " 14.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-11.html", "14.2 Meeting Videos", " 14.2 Meeting Videos 14.2.1 Cohort 1 Meeting chat log LOG "],["compiled-code.html", "Chapter 15 Compiled code", " Chapter 15 Compiled code Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-10.html", "15.1 SLIDE 1", " 15.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-12.html", "15.2 Meeting Videos", " 15.2 Meeting Videos 15.2.1 Cohort 1 Meeting chat log LOG "],["installed-files.html", "Chapter 16 Installed files", " Chapter 16 Installed files Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-11.html", "16.1 SLIDE 1", " 16.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-13.html", "16.2 Meeting Videos", " 16.2 Meeting Videos 16.2.1 Cohort 1 Meeting chat log LOG "],["other-components.html", "Chapter 17 Other components", " Chapter 17 Other components Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-12.html", "17.1 SLIDE 1", " 17.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-14.html", "17.2 Meeting Videos", " 17.2 Meeting Videos 17.2.1 Cohort 1 Meeting chat log LOG "],["git-and-github-1.html", "Chapter 18 Git and GitHub", " Chapter 18 Git and GitHub Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-13.html", "18.1 SLIDE 1", " 18.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-15.html", "18.2 Meeting Videos", " 18.2 Meeting Videos 18.2.1 Cohort 1 Meeting chat log LOG "],["automated-checking.html", "Chapter 19 Automated checking", " Chapter 19 Automated checking Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-14.html", "19.1 SLIDE 1", " 19.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-16.html", "19.2 Meeting Videos", " 19.2 Meeting Videos 19.2.1 Cohort 1 Meeting chat log LOG "],["releasing-a-package.html", "Chapter 20 Releasing a package", " Chapter 20 Releasing a package Learning objectives: THESE ARE NICE TO HAVE BUT NOT ABSOLUTELY NECESSARY "],["slide-1-15.html", "20.1 SLIDE 1", " 20.1 SLIDE 1 ADD SLIDES AS SECTIONS (##). TRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF. "],["meeting-videos-17.html", "20.2 Meeting Videos", " 20.2 Meeting Videos 20.2.1 Cohort 1 Meeting chat log LOG "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
